---
title: "MB2 Merge eye-tracking data"
format: html
---

```{r}
library(tidyverse)
library(here)
library(assertthat)

source(here('helper','ensure_repo_structure.R'))
FIRST_TIME = FALSE
```
# Download and check columns

Download data locally

```{r download, eval= FIRST_TIME}
source(here('helper', 'osf_download.R'))
gather_osf_data("p3txj", XY_DATA_DIR)
```
Before we load these data, let's quickly check for compliance with column naming conventions. 

```{r validate columns}
cols <- c("lab_id", "participant_id", "media_name", 
          "x", "y", "t", "pupil_left", "pupil_right")

col_types = list(lab_id = col_character(),
                 participant_id = col_character(),
                 media_name = col_character(),
                 x = col_double(),
                 y = col_double(),
                 t = col_double(),
                 pupil_left = col_double(),
                 pupil_right = col_double())

local_files <- dir(here(XY_DATA_DIR), pattern = "*.csv")

for (f in local_files) {
  print(f)
  
  d <- read_csv(here(XY_DATA_DIR,f), n_max = 100, 
                col_types = col_types)
  
  # check that all columns are in the col list
  print(see_if(all(cols %in% names(d))))
  
  # check that no extra cols
  print(see_if(all(names(d) %in% cols)))
}
```

# Load local data

Now, load local data.

It is critical to downsample time to 40 Hz at this stage to ensure that we can load all the files effectively. Normally, this would go later in the pipeline but we can't load all the data without doing it. 

```{r load data}
source(here("helper","resampling_helper.R"))

xy <- local_files |>
  map_df(function(f) {
    print(f)
    
    d <- read_csv(here(XY_DATA_DIR,f),
                  col_types = col_types)
    
    
    d$age_cohort <- case_when(grepl('_adults_', f) ~ 'adults',
                              grepl('_toddlers_', f) ~ 'toddlers',
                              T ~ NA)
    
    d$participant_id <- paste(d$participant_id, d$age_cohort, sep = "-")
    
    
    # time resampling 
    # filter timepoints with NAs
    # we need to add numbers for media names so that we can preserve order
    # lab_event_num is an unvalidated event number just for the purpose of 
    # this resampling
    d <- d |>
      filter(!is.na(t), !is.na(media_name)) |>
      group_by(participant_id) |>
      mutate(lab_event_num = make_media_nums(media_name))
    
    # need to know they are in milliseconds
    is_microseconds <- median(diff(d$t)) > 500
    if (is_microseconds) {
      d$t <- d$t / 1000
    }
    
    # if in seconds
    is_seconds <- median(diff(d$t)) < .1
    if (is_seconds) {
      d$t <- d$t * 1000
    }
    
    # resample time to 40 Hz
    d_resamp <- d |>
      resample_times(timepoint_col_name = "t", 
                     trial_col_name = "lab_event_num") |>
      select(-lab_event_num)
    
    return(d_resamp)
  })

## TO DO: check on some residual warning messages generated during resampling

#save the intermediate
save(xy, file = here(INTERMEDIATE_FOLDER, INTERMEDIATE_002A))
```