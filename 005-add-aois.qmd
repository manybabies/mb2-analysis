---
title: "Add aois-hits to the eyetracking data"
format: html
---

```{r}
library(tidyverse)
library(here)
library(assertthat)
library(arrow)

source(here('helper','ensure_repo_structure.R'))
```

```{r}
data_normalized <- arrow::open_dataset(here(INTERMEDIATE_FOLDER, INTERMEDIATE_004_par), format = "parquet")
```

```{r}

# add information about screen size and eyetracker coordinate origin
dataset_specs <- read.csv(here('metadata', 'dataset_sheet.csv')) %>%
  select(data_id, data_type, screen_dimensions, point_zero, tracker_type, software_type, sampling_rate) %>%
  separate(data_id, c("lab_id", "age_cohort"), sep="_") %>% 
  separate(screen_dimensions, c("screen_width", "screen_height"), sep=" x ") %>% 
  mutate(screen_width = as.numeric(str_trim(screen_width)),
         screen_height = as.numeric(str_trim(screen_height)))

# TODO: One lab is missing the zero coordinate
allowed_origins <- c('upper left','lower left','center')
invalid_origins <- dataset_specs %>% filter(!(point_zero %in% allowed_origins))

data_normalized_specs <- data_normalized %>% 
  left_join(dataset_specs, by=join_by(lab_id, age_cohort)) %>% 
  filter(point_zero %in% allowed_origins)


# Flip Coordinate Origin
data_corrected_origin <- data_normalized_specs  %>% 
  
    mutate(
      y = case_when(
        point_zero == 'upper left' ~ screen_height - y, #TODO: at least some point zeros are "upper left"
        point_zero == 'center' ~ y + screen_height/2, # TODO: this assumes that up and right are "+" for the eyetracker - check this!
        T ~ y),
      x = case_when(
        point_zero == 'center' ~ x + screen_width/2, # TODO: this assumes that up and right are "+" for the eyetracker - check this!
        T ~ x),
    )

# trim xy that land outside of the screen
data_trimmed <- data_corrected_origin  %>% 
    mutate(x = ifelse(x >= 0 & x <= screen_width, x, NA),
           y = ifelse(y >= 0 & y <= screen_height, y, NA))



# add aois
# NOTE: This changes the x and y coordinates to "relative to stimulus" as opposed to "relative to screen".
# The original x and y values are now saved in x_screen and y_screen
source(here('helper', 'aoi_helper.R'))
data_with_aois <- data_trimmed %>%
  rename(target_side = target) %>%
  create_aoi_timepoints() %>% ungroup()
```

```{r saving data with the aois}
arrow::write_dataset(data_with_aois,
                     here(INTERMEDIATE_FOLDER, INTERMEDIATE_005_par),
                      existing_data_behavior="overwrite", partition="lab_id")
```


Optional sanity checking code form here on

```{r visualize AOIs and data}
# OPTIONAL: You dont need to run this if you are not sanity checking the data

source(here('helper', 'aoi_helper.R'))
data_with_aois <- data_with_aois %>% collect()

draw_aoi <- function(aoi_name, color){
  return(
    geom_rect(aes(xmin = aoi_region_sets[[1,paste(aoi_name,'_x_min',sep="")]],
                  xmax = aoi_region_sets[[1,paste(aoi_name,'_x_max',sep="")]],
                  ymin = aoi_region_sets[[1,paste(aoi_name,'_y_min',sep="")]],
                  ymax = aoi_region_sets[[1,paste(aoi_name,'_y_max',sep="")]] 
            ),fill = color, alpha = 0.7, color = color)
  )
}

CHECKING_DIR <- here('manual_data_checking')
CHECKING_HEATMAP_DIR <- here(CHECKING_DIR, 'heatmaps')

# checklist to see what labs have already been checked and accepted
CHECKING_HEATMAP_CSV <- here(CHECKING_DIR, 'heatmaps_checked.csv')

dir.create(CHECKING_DIR, showWarnings = FALSE)
dir.create(CHECKING_HEATMAP_DIR, showWarnings = FALSE)

# if checklist already exists, load it and look for potentially missing labs, else create a new one from the data
if (file.exists(CHECKING_HEATMAP_CSV)){
  checking_img_list <- read.csv(CHECKING_HEATMAP_CSV)
  newly_added_labs <- data_with_aois %>% distinct(lab_id) %>% filter(!(lab_id %in% checking_img_list$lab_id)) %>% mutate(data_fine = NA)
  checking_img_list <- checking_img_list %>% rbind(newly_added_labs)
  rm(newly_added_labs)
}else{
  checking_img_list <- data_with_aois %>% distinct(lab_id) %>% mutate(data_fine = NA)
}

write.csv(checking_img_list, CHECKING_HEATMAP_CSV, row.names = FALSE)
labs_to_check <- checking_img_list %>% 
  # filter(is.na(data_fine) | data_fine == 'no') %>% 
  pull(lab_id)
  
library(png)
img.r <- as.raster(readPNG(here('helper', 'stim.png')),interpolate=F)

data_with_aois %>% 
  filter(!(media_name %in% c('star_calib'))) %>% 
  group_by(lab_id, media_name) %>%
  group_walk(function(data, grouping){
    print(grouping$lab_id)
    
    if(!(grouping$lab_id %in% labs_to_check)){
      return(NA)
    }
    
    labdir = here(CHECKING_HEATMAP_DIR, grouping$lab_id)
    dir.create(labdir, showWarnings = FALSE)
    tryCatch(
    ggsave(
      here(labdir, paste0(grouping$media_name, '__', grouping$lab_id, '.png')),
      plot = 
        ggplot(data, aes(x,y)) + 
          annotation_raster(img.r, xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf)+
          stat_density2d(geom = "polygon", aes(fill=..level.., alpha = ..level..), size= 20, bins= 500) + 
          scale_fill_gradient(low="blue",high="red") +
          scale_alpha_continuous(range=c(0.01,1.0), guide = FALSE) +
          scale_x_continuous(limits=c(0,dim(img.r)[2]),expand=c(0,0))+
          scale_y_continuous(limits=c(0,dim(img.r)[1]),expand=c(0,0))+
          coord_fixed(),
      width = 7,
      height = 5,
      units = "in"
      ), error = function(e) print(e))
  })

```


```{r}
# preliminary checking if the lookingscore pattern for a given lab/cohort looks sensible

# OPTIONAL: You dont need to run this if you are not sanity checking the data

data_with_aois <- data_with_aois %>% collect()

CHECKING_LSGRAPH_DIR <- here(CHECKING_DIR, 'lookingscore_graphs')
dir.create(CHECKING_LSGRAPH_DIR, showWarnings = FALSE)

# checklist to see what labs have already been checked and accepted
CHECKING_LSGRAPH_CSV <- here(CHECKING_DIR, 'lookingscore_graphs_checked.csv')

# Same logic as above, maybe put into a function in the future
# if checklist already exists, laod it and look for potentially missing labs, else create a new one from the data
if (file.exists(CHECKING_LSGRAPH_CSV)){
  checking_ls_list <- read.csv(CHECKING_LSGRAPH_CSV)
  newly_added_labs <- data_with_aois %>% distinct(lab_id) %>% filter(!(lab_id %in% checking_ls_list$lab_id)) %>% mutate(data_fine = NA)
  checking_ls_list <- checking_ls_list %>% rbind(newly_added_labs)
  rm(newly_added_labs)
}else{
  checking_ls_list <- data_with_aois %>% distinct(lab_id) %>% mutate(data_fine = NA)
}

write.csv(checking_ls_list, CHECKING_LSGRAPH_CSV, row.names = FALSE)
labs_to_check <- checking_ls_list %>% filter(is.na(data_fine) | data_fine == 'no') %>% pull(lab_id)


data_with_aois %>% 
  filter(grepl('FAM', media_name)) %>% 
  filter(grepl('target|distractor', aoi)) %>% 
  mutate(hit = ifelse(grepl('target', aoi), 1, 0)) %>%
  group_by(lab_id, age_cohort) %>% 
  group_walk(
    function(data, info){
  
      labdir = here(CHECKING_LSGRAPH_DIR, info$lab_id)
        dir.create(labdir, showWarnings = FALSE)
      
      render <- data %>%
        group_by(t_norm) %>%
        summarise(ls = sum(hit)/n())
      
      png(filename=here(labdir, paste0('ls_fam_', info$lab_id, '_', info$age_cohort,'.png')))
      plot(render$t_norm, render$ls, type = "l")
      dev.off()
})

# Plot the ls over time for the entire sample (for fam trials) - data needs some cleanup right now
#data_with_aois %>% 
#  filter(grepl('FAM', media_name)) %>% 
#  filter(grepl('target|distractor', aoi)) %>% 
#  mutate(hit = ifelse(grepl('target', aoi), 1, 0)) %>% 
#  group_by(t_norm) %>%
#  summarise(ls = sum(hit)/n()) %>% 
#  plot(.$t_norm, .$ls, type = "l")

```

```{r saving}
# saving if checking is in progress
usable_labs <- intersect(
  (read.csv(CHECKING_LSGRAPH_CSV) %>% filter(data_fine == "yes"))$lab_id,
  (read.csv(CHECKING_HEATMAP_CSV) %>% filter(data_fine == "yes"))$lab_id
)

arrow::write_dataset(data_with_aois %>% filter(lab_id %in% usable_labs), 
                     here(INTERMEDIATE_FOLDER, INTERMEDIATE_005_par),
                      existing_data_behavior="overwrite", partition="lab_id")

```