---
title: "Add aois-hits to the eyetracking data"
format: html
---

```{r}
library(tidyverse)
library(here)
library(assertthat)

source(here('helper','ensure_repo_structure.R'))
```

```{r}
load(here(INTERMEDIATE_FOLDER, INTERMEDIATE_004))
```

```{r}

# add information about screen size and eyetracker coordinate origin
dataset_specs <- read.csv(here('metadata', 'dataset_sheet.csv')) %>%
  select(data_id, screen_dimensions, point_zero) %>%
  separate(data_id, c("lab_id", "age_cohort"), sep="_") %>% 
  separate(screen_dimensions, c("screen_width", "screen_height"), sep=" x ") %>% 
  mutate(screen_width = as.numeric(str_trim(screen_width)),
         screen_height = as.numeric(str_trim(screen_height)))

# TODO: One lab is missing the zero coordinate
allowed_origins <- c('upper left','lower left','center')
invalid_origins <- dataset_specs %>% filter(!(point_zero %in% allowed_origins))

data_resampled_specs <- data_resampled %>% 
  left_join(dataset_specs, by=join_by(lab_id, age_cohort)) %>% 
  filter(point_zero %in% allowed_origins)


# Flip Coordinate Origin
data_corrected_origin <- data_resampled_specs  %>% 
  
    mutate(
      y = case_when(
        point_zero == 'upper left' ~ screen_height - y, #TODO: at least some point zeros are "upper left"
        point_zero == 'center' ~ y + screen_height/2, # TODO: this assumes that up and right are "+" for the eyetracker - check this!
        T ~ x),
      x = case_when(
        point_zero == 'center' ~ x + screen_width/2, # TODO: this assumes that up and right are "+" for the eyetracker - check this!
        T ~ x),
    )

# trim xy that land outside of the screen
data_trimmed <- data_corrected_origin  %>% 
    mutate(x = ifelse(x >= 0 & x <= screen_width, x, NA),
           y = ifelse(y >= 0 & y <= screen_height, y, NA))



# add aois
source(here('helper', 'aoi_helper.R'))
data_with_aois <- data_trimmed %>%
  rename(target_side = target) %>% 
  create_aoi_timepoints()


# TODO: Visualize this data to double check

```

```{r visualize AOIs and data}
source(here('helper', 'aoi_helper.R'))


draw_aoi <- function(aoi_name, color){
  return(
    geom_rect(aes(xmin = aoi_region_sets[[1,paste(aoi_name,'_x_min',sep="")]],
                  xmax = aoi_region_sets[[1,paste(aoi_name,'_x_max',sep="")]],
                  ymin = aoi_region_sets[[1,paste(aoi_name,'_y_min',sep="")]],
                  ymax = aoi_region_sets[[1,paste(aoi_name,'_y_max',sep="")]], 
            fill = color, alpha = 0.7, color = color))
  )
}

CHECKING_DIR <- here('manual_data_checking')
CHECKING_HEATMAP_DIR <- here(CHECKING_DIR, 'heatmaps')

# checklist to see what labs have already been checked and accepted
CHECKING_HEATMAP_CSV <- here(CHECKING_DIR, 'heatmaps_checked.csv')

dir.create(CHECKING_DIR, showWarnings = FALSE)
dir.create(CHECKING_HEATMAP_DIR, showWarnings = FALSE)

# if checklist already exists, laod it and look for potentially missing labs, else create a new one from the data
if (file.exists(CHECKING_HEATMAP_CSV)){
  checking_img_list <- read.csv(CHECKING_HEATMAP_CSV)
  newly_added_labs <- data_with_aois %>% distinct(lab_id) %>% filter(!(lab_id %in% checking_img_list$lab_id)) %>% mutate(data_fine = NA)
  checking_img_list <- checking_img_list %>% rbind(newly_added_labs)
  rm(newly_added_labs)
}else{
  checking_img_list <- data_with_aois %>% distinct(lab_id) %>% mutate(data_fine = NA)
}

write.csv(checking_img_list, CHECKING_HEATMAP_CSV, row.names = FALSE)
labs_to_check <- checking_img_list %>% filter(is.na(data_fine) | data_fine == 'no') %>% pull(lab_id)


data_with_aois %>% 
  filter(!(media_name %in% c('star_calib'))) %>% 
  group_by(lab_id, media_name) %>%
  group_walk(function(data, grouping){
    
    if(!(grouping$lab_id %in% labs_to_check)){
      return(NA)
    }
    
    labdir = here(CHECKING_HEATMAP_DIR, grouping$lab_id)
    dir.create(labdir, showWarnings = FALSE)
    
    
    # draw plot here
    # TODO: Better function
    
    ## temp for testing
    data = data %>% slice_head(n=100)
    
    ggsave(
      here(labdir, paste0(grouping$media_name, '__', grouping$lab_id, '.png')),
      plot = ggplot(data,aes(x,y)) + 
        xlim(0, 1280) +
        ylim(0, 960) +
        draw_aoi("lbig", "blue") +
        draw_aoi("rbig", "blue") +
        draw_aoi("l", "red") +
        draw_aoi("r", "red") +
        draw_aoi("lb", "yellow") +
        draw_aoi("rb", "yellow") +
        draw_aoi("w", "white")+
        geom_point(alpha=0.5))
    
  })

```


```{r}
# preliminary checking if the lookingscore pattern for a given lab/cohort looks sensible
# needs some tweaking, just throwing the code into the repo for now

create_and_save_linegraph <- function(data, info){
  render <- data %>%
    group_by(t_norm) %>%
    summarise(ls = sum(hit)/n())
  
  png(filename=paste0('lookingscore_fam', info$lab_id[1], '_', info$age_cohort[1],'.png'))
  plot(render$t_norm, render$ls, type = "l")
  dev.off()
}

# uncomment this once I have decided where to put the images, they currently get dumped into the projects root
#data_with_aois %>% 
#  filter(media_name != 'star_calib') %>%
#  filter(grepl('FAM', media_name)) %>% 
#  filter(grepl('target|distractor', aoi)) %>% 
#  mutate(hit = ifelse(grepl('target', aoi), 1, 0)) %>%
#  group_by(lab_id, age_cohort) %>% 
#  group_walk(create_and_save_linegraph)

```

```{r saving}
save(data_with_aois, file = here(INTERMEDIATE_FOLDER, INTERMEDIATE_005))
```