---
title: "MB2 exclusions"
format: html
---

Goal: implement exclusions, document numbers for exclusions in a separate CSV, and pass on a final dataset. 

```{r}
library(tidyverse)
library(here)
library(assertthat)
library(knitr)
library("papaja")

source(here('helper','ensure_repo_structure.R'))
source(here('helper','exclusion_helper.R'))

load(here(INTERMEDIATE_FOLDER, INTERMEDIATE_005))
load(here(INTERMEDIATE_FOLDER, INTERMEDIATE_002B))
```

Add a column `participant_lab_id` to the demographics data.

```{r} 
#this should be present once the pipeline is fully updated
combined_demo <- combined_demo %>% unite(col = "participant_lab_id",
        lab_id, participant_id,
        remove = FALSE, sep = "_")
```

Compare participants in the eyetracking data and participants in the demographics data.

```{r}
#participants who appear in the demographics data but not in the eyetracking data
participants_demo_only <- setdiff(combined_demo$participant_lab_id, unique(data_preprocessed$participant_lab_id))
#add a column to combined_demo to track this
combined_demo <- combined_demo %>%
  mutate(
    no_eyetracking_data = participant_lab_id %in% participants_demo_only
  )

# TO-DO: validate against session exclusions

#participants who appear in the eyetracking data but not in the demographics data
participants_et_only <- setdiff(unique(data_preprocessed$participant_lab_id),combined_demo$participant_lab_id)
#validate
assert_that(length(participants_et_only)==0)
```

Extract all of the unique participants and trials in the eyetracking data. This is helfpul to ensure that all exclusion relevant to the remaining eyetracking data is preserved in one dataframe without making multiple joins into the (very large) eyetracking dataset.

```{r}
# extract unique participants and trials
unique_et_participants_trials <- data_preprocessed %>%
  distinct(lab_id, participant_lab_id, participant_id, age_cohort, participant_trial_id, condition,trial_num,media_name,trial_file_name) 

# interim solution to participants with only calibration ET data
# store them here and then handle this as a special case
unique_et_participants_calib_removed <- unique_et_participants_trials %>%
  filter(!(media_name %in% c("Pupil_Calibration","star_calib"))) %>%
  distinct(participant_lab_id) %>%
  pull(participant_lab_id)
participants_with_only_calibration_et <- setdiff(
  unique(unique_et_participants_trials$participant_lab_id), 
  unique_et_participants_calib_removed)
#to handle this exception, let's create a specific column to track this issue in combined_demo
combined_demo <- combined_demo %>%
  mutate(
    only_calibration_et = participant_lab_id %in% participants_with_only_calibration_et
  )

unique_et_participants_trials <- unique_et_participants_trials %>%
  # remove calibration trials
  filter(!(media_name %in% c("Pupil_Calibration","star_calib")))
```

# Individual Trial Exclusions

## Webcam specific: exclude after manual checking of dataquality

```{r}
mew <- bind_rows(lapply(
  list.files(
    here(DEMO_DATA_DIR, "webcam_exclusions"),
    pattern = "\\.csv$", full.names = TRUE
  ),
  function(file) {
    df <- read.csv(file)
    df$filename <- basename(file)
    return(df)
  }
))

fn_pattern <- "^(\\w+?)_(\\w+?)_(\\w+?)_(\\w+)\\.csv$"

# the poor man's pivot longer
manual_exclusions <- bind_rows(
  mew %>% select(1, 15, trial = 2, ok = 3),
  mew %>% select(1, 15, trial = 4, ok = 5),
  mew %>% select(1, 15, trial = 6, ok = 7),
  mew %>% select(1, 15, trial = 8, ok = 9),
  mew %>% select(1, 15, trial = 10, ok = 11),
  mew %>% select(1, 15, trial = 12, ok = 13),
) %>% mutate(man_exclude = tolower(ok) != "yes") %>%
  mutate(participant_lab_id =
           paste(paste(
             sub(fn_pattern, "\\1", filename),
             id, sep="_"),
             sub(fn_pattern, "\\2", filename), sep="-"),
             ) %>% 
  select(participant_lab_id, media_name = trial, man_exclude)

#ensure that all participants with blank media name info are not in data preprocessed
valid_media_names <- unique(data_preprocessed$media_name)
assert_that(!any(unique(filter(manual_exclusions,!(media_name %in% valid_media_names))$participant_lab_id) %in% unique(data_preprocessed$participant_lab_id)))

# join into unique_et_participants_trials
unique_et_participants_trials <- unique_et_participants_trials %>%
  left_join(manual_exclusions, by=c("media_name", "participant_lab_id"))
```

## Apply trial-level errors reported by labs

```{r}
#rename error info columns
combined_demo <- combined_demo %>%
  rename(fam1_errorinfo = fam1_error_info,
         fam2_errorinfo = fam2_error_info,
         fam3_errorinfo = fam3_error_info,
         fam4_errorinfo = fam4_error_info,
         test1_errorinfo = test1_error_info,
         test2_errorinfo = test2_error_info)

#trial error names
trial_error_demo_cols <- c("fam1_error","fam2_error","fam3_error","fam4_error","test1_error","test2_error",
                           "fam1_errorinfo","fam2_errorinfo","fam3_errorinfo","fam4_errorinfo","test1_errorinfo","test2_errorinfo")

# extract trial-level errors from the demographic information
trial_level_errors_demographics_lab_reported <- combined_demo %>%
  select(lab_id,participant_lab_id,participant_id, age_cohort, trial_error_demo_cols) %>%
  group_by(lab_id,participant_lab_id,participant_id) %>%
  pivot_longer(
    cols = starts_with("fam") | starts_with("test"),
    names_to = c("trial_identifier",".value"),
    names_sep = "_"
  ) %>%
  separate(trial_identifier,c("trial_type","trial_num"),"(?<=[a-z])(?=[0-9])") %>%
  mutate(trial_num=as.numeric(trial_num)) %>%
  mutate(
    trial_num = case_when(
      trial_type == "test" & trial_num == 1 ~ 5,
      trial_type == "test" & trial_num == 2 ~ 6,
      TRUE ~ trial_num)
  ) %>%
  mutate(
    trial_error_lab_reported = case_when(
      error == "noerror" ~ "no",
      error == "error" ~ "yes")
    ) %>% 
    #remove columns that vary within participants, to make joining at the participant level possible
  select(-trial_type, -error,-errorinfo)

# inspect lab_reported trial errors by age cohort
trial_level_errors_demographics_lab_reported %>%
  group_by(age_cohort,trial_num) %>%
  summarize(
    total_trials = n(),
    valid_trials = sum(trial_error_lab_reported=="no"),
    prop_valid_trials = valid_trials/total_trials
  )

# join into eye-tracking data trials
unique_et_participants_trials <- unique_et_participants_trials %>%
  left_join(trial_level_errors_demographics_lab_reported)

```

## Sufficient Looking Data per Trial

"We will exclude individual trials if more than 50% of the gaze data is missing (defined as off-screen or unavailable point of gaze during the whole trial, not just the anticipatory period)." (p. 33 Stage 1 Registered Report)

```{r}
# summarize by participant, trial and condition
summarized_valid_looks <- data_preprocessed %>%
  #define a valid point of gaze
  #we define a valid point of gaze as requiring both a valid x-coordinate and a valid y-coordinate
  # x-screen and y-screen are x-y coordinates relative to the screen size, prior
  mutate(
    valid_xy_look_type = case_when(
      !is.na(x_screen) & !is.na(y_screen) ~ "both x and y are valid",
      !is.na(x_screen) & is.na(y_screen) ~ "x is valid but not y",
      is.na(x_screen) & !is.na(y_screen) ~ "y is valid but not x",
      is.na(x_screen) & is.na(y_screen) ~ "neither x nor y are valid",
      TRUE ~ "check for error"
    )
  ) %>%
  mutate(
    valid_xy_look = ifelse(valid_xy_look_type == "both x and y are valid",1,0)
  ) %>%
  #only focus on familiarization and test trials
  #filter(condition %in% c("familiarization", "ignorance", "knowledge")) %>%
  #TO-DO check whether to go back to filtering based on condition once some preprocessing steps are fixed?
  filter(!media_name %in% c("Pupil_Calibration","star_calib")) %>%
  group_by(participant_lab_id,lab_id,age_cohort,condition,participant_id,participant_trial_id,trial_num) %>%
  summarize(
    total_frames=n(),
    total_valid_looks = sum(valid_xy_look),
    prop_valid_looks = total_valid_looks / total_frames
  )
```

Inspect the resulting valid looking data

```{r}
ggplot(summarized_valid_looks, aes(prop_valid_looks,fill=age_cohort))+
  geom_histogram()+
  facet_wrap(~age_cohort+condition)
```

Exclude trials that do not meet the 50% valid looking criterion (exclude more than 50% missing is equivalent to at least 50% looking for inclusion)

```{r}
summarized_valid_looks <- summarized_valid_looks %>%
  mutate(
    valid_looking_trial = case_when(
      prop_valid_looks >= 0.5 ~ 1,
      TRUE ~ 0
    )) %>%
  mutate(
    trial_error_valid_looking = case_when(
      valid_looking_trial == 0 ~ "yes",
      TRUE ~ "no"
    ))
  
# inspect trial errors by age cohort and condition
summarized_valid_looks %>%
  group_by(age_cohort,condition,trial_num) %>%
  summarize(
    total_trials = n(),
    valid_trials = sum(valid_looking_trial),
    prop_valid_trials = valid_trials/total_trials
  )
```

Join back in the information about trial errors into the eyetracking-based trial information

```{r}
#join
unique_et_participants_trials <- unique_et_participants_trials %>%
  left_join(summarized_valid_looks)
```

## Overall valid trials

Summarize information about whether each trial is valid

```{r}
# Create an overarching trial error common based on all of the trial-based exclusion criteria
# TO-DO: check the order of trial error assignment
unique_et_participants_trials <- unique_et_participants_trials %>%
  mutate(
    trial_error = case_when(
      #Did the lab report a trial error?
      trial_error_lab_reported == "yes" ~ "yes",
      #manual web-cam exclusions
      !is.na(man_exclude) & man_exclude==TRUE ~ "yes",
      #is there sufficient looking on the given trial?
      trial_error_valid_looking == "yes" ~ "yes",
      TRUE ~ "no"
    ),
    trial_error_type = case_when(
      trial_error_lab_reported == "yes" ~ "lab reported trial error",
      !is.na(man_exclude) & man_exclude==TRUE ~ "manual webcam exclusion",
      trial_error_valid_looking == "yes" ~ "insufficient looking",
      TRUE ~ NA
    )
  )
```

# Trial-based Participant Exclusions

## Sufficient Valid Familiarization Trials

Next, we exclude participants if their data is missing on more than one familiarization trial.

First, let's summarize the number of valid familiarization trials by participant.

```{r}
summarized_valid_familiarization_trials <- unique_et_participants_trials %>%
  filter(condition == "familiarization") %>%
  group_by(participant_lab_id,lab_id,age_cohort,participant_id) %>%
  summarize(
    total_valid_fam_trials = sum(trial_error=="no")
  ) %>%
  #participants are excluded if insufficient valid familiarization trials are available
  mutate(
    sufficient_fam_trials = ifelse(total_valid_fam_trials>=3,1,0)
  )

#join back in to eyetracking data
unique_et_participants_trials <- unique_et_participants_trials %>%
  left_join(summarized_valid_familiarization_trials)

#check if any participants are missing familiarization information
assert_that(sum(is.na(unique_et_participants_trials$sufficient_fam_trials))==0)
```

## Valid First Test Trial

Finally we exclude participants if their data is missing on the first test trial. 

Text: "If multiple reasons for exclusion are applicable to a participant, the criteria will be assigned in the order above (for details on exclusions, see Supplemental Material)."

Identify participants without the first test trial

```{r}
# identify valid and invalid first test trials
summarized_valid_first_test_trials <- unique_et_participants_trials %>%
  filter(condition %in% c("ignorance","knowledge")) %>%
  # TO-DO: make sure this is a robust way of identifying the first test trial
  filter(trial_num==5) %>%
  mutate(
    valid_first_test_trial = case_when(
      trial_error == "no" ~ 1,
      trial_error == "yes" ~ 0,
      TRUE ~ NA
    )
  ) %>%
  #remove columns that vary within participants, to make joining at the participant level possible
  select(lab_id,participant_lab_id, participant_id,age_cohort,valid_first_test_trial)

#check for participants with missing first test trials
setdiff(unique(unique_et_participants_trials$participant_lab_id),unique(summarized_valid_first_test_trials$participant_lab_id))
setdiff(unique(summarized_valid_first_test_trials$participant_lab_id),unique(unique_et_participants_trials$participant_lab_id))

#join back in to unique_et_participants_trials
unique_et_participants_trials <- unique_et_participants_trials %>%
  left_join(summarized_valid_first_test_trials)

##TO-DO: Fix up this portion once we figure out what is going on with these participants
#https://github.com/manybabies/mb2-analysis/issues/121
#check if any participants are missing valid first test trial information
#(given that there are participants with only familiarization trials, this appears to be the case)
sum(is.na(unique_et_participants_trials$valid_first_test_trial))

#fix up valid_first_test_trial column for participants who only have familiarization trials
unique_et_participants_trials <- unique_et_participants_trials %>%
  mutate(valid_first_test_trial = ifelse(is.na(valid_first_test_trial),0,valid_first_test_trial))

#validate
assert_that(sum(is.na(unique_et_participants_trials$valid_first_test_trial))==0)
```

## Apply overall trial-based participant exclusions

```{r}
unique_et_participants_trials <- unique_et_participants_trials %>%
  mutate(
    trial_based_participant_exclusion = case_when(
      #step 5 (insufficient familiarization trials)
      sufficient_fam_trials == 0 ~ "yes",
      #step 6 (first test trial)
      valid_first_test_trial == 0 ~ "yes",
      TRUE ~ "no"
    ),
    trial_based_participant_exclusion_type = case_when(
      sufficient_fam_trials == 0 ~ "5",
      valid_first_test_trial == 0 ~ "6",
      TRUE ~ NA
    )
  )
```

## Overview of trial-based participant exclusions

Note that this is before applying age-based exclusions.

```{r}
overview_trial_based_errors <- unique_et_participants_trials %>%
  distinct(participant_lab_id,lab_id,age_cohort,participant_id,trial_based_participant_exclusion, trial_based_participant_exclusion_type) %>%
  group_by(age_cohort) %>%
  summarize(
    total_N = n(),
    trial_error_exclusions = sum(trial_based_participant_exclusion=="yes"),
    prop_excluded = trial_error_exclusions / total_N
  )

overview_trial_based_errors %>%
  knitr::kable()
```


# Join in exclusion & demographic information to ET data and apply exclusions

## Join all exclusion information to eye-tracking data

```{r}
# join all information into data_preprocessed (the eye-tracking data)
data_preprocessed <- data_preprocessed %>%
  left_join(unique_et_participants_trials)
```

## Join minimal demographic information into the eye-tracking data

```{r}
#create a minimal demographic data frame to join into the eyetracking data
## The combined demographic data has a huge amount of information, so we need to be careful about
## how much of that info (i.e. how many columns) we join into the full demographic dataset.
## Currently, the strategy is to join just the most critical columns needed for the primary analyses.
## If more demographic information is needed for exploratory analyses, we can join the demographic information in at that point in the script
combined_demo_minimal <- combined_demo %>%
  select(participant_lab_id,lab_id,age_cohort,participant_id,pilot,method,session_error,session_error_info,session_error_notes,exclude_session,participant_gender,age_years,age_years_n,age_days,age_days_num,age_mo,age_exclusion,nationality,institution,country,lang1,lang1_exposure, lang2,lang2_exposure,only_calibration_et)

#join the minimal demographics file into the eyetracking data
data_preprocessed <- data_preprocessed %>%
  left_join(combined_demo_minimal)
```

## Join trial-based exclusion information into demographic data

```{r}
participant_trial_error_info <- unique_et_participants_trials %>% 
  distinct(lab_id, participant_lab_id, participant_id, age_cohort,total_valid_fam_trials,sufficient_fam_trials,valid_first_test_trial,trial_based_participant_exclusion, trial_based_participant_exclusion_type)

d_participants <- combined_demo %>%
  left_join(participant_trial_error_info)

## handle some exceptional cases
### participants who only had calibration ET data
d_participants <- d_participants %>%
  mutate(
    trial_based_participant_exclusion = case_when(
      only_calibration_et == TRUE ~ "yes",
      TRUE ~ trial_based_participant_exclusion
    ),
    trial_based_participant_exclusion_type = case_when(
      only_calibration_et == TRUE ~ "5",
      TRUE ~ trial_based_participant_exclusion_type
    ),
    sufficient_fam_trials = case_when(
      only_calibration_et == TRUE ~ 0,
      TRUE ~ sufficient_fam_trials
    ),
    valid_first_test_trial = case_when(
      only_calibration_et == TRUE ~ 0,
      TRUE ~ valid_first_test_trial
    ),
    total_valid_fam_trials = case_when(
      only_calibration_et == TRUE ~ 0,
      TRUE ~ total_valid_fam_trials
    )
    )

```

Apply exclusions

```{r}
d_participants <- d_participants %>%
  #check the order here
  mutate(
    exclude_participant = case_when(
      pilot == "yes" ~ "yes",
      session_error == "error" ~ "yes",
      age_exclusion == "yes" ~ "yes",
      trial_based_participant_exclusion == "yes" ~ "yes",
      TRUE ~ "no"
    ),
    exclude_participant_type = case_when(
      pilot == "yes" ~ "pilot",
      session_error == "error" ~ as.character(session_error_info),
      age_exclusion == "yes" ~ "age exclusion",
      trial_based_participant_exclusion == "yes" ~ trial_based_participant_exclusion_type,
      TRUE ~ NA
    )
  )
```

Write out the participant info with exclusion information

```{r}
write_csv(d_participants,
          here(INTERMEDIATE_FOLDER, INTERMEDIATE_006a))
```

## Write the dataset pre-exclusions

```{r}
save(data_preprocessed, file = here(INTERMEDIATE_FOLDER, INTERMEDIATE_006b))
```

## Apply all exclusions

```{r}
# filter
data_preprocessed_post_exclusions <- data_preprocessed %>%
  #filter based on age
  filter(age_exclusion=="no") %>%
  # filter out trial errors (including webcam exclusions, insufficient looking, and lab-reported trial errors)
  filter(trial_error=="no") %>%
  #filter based on trial errors
  filter(trial_based_participant_exclusion=="no")
```

## Write the dataset post-exclusions

```{r saving}
save(data_preprocessed_post_exclusions, file = here(INTERMEDIATE_FOLDER, INTERMEDIATE_006))
```

# Summarize lab and participant information

## Handle pilot participants

We remove pilot participants from considerations of participant counts. Essentially, we want pilot participants not  to count towards any tallies in the main analyses, including exclusion counts, because, by definition, they were "only" pilot participants.

```{r}
#record number of pilot participants
n_pilot_participants <- d_participants %>%
  filter(pilot=="yes") %>%
  summarise(n = length(unique(participant_lab_id)))

#retain a data frame that includes the pilot participants
d_participants_including_pilot <- d_participants

#focus all subsequent counts on participants NOT including pilot participants
d_participants <- d_participants %>%
  filter(pilot=="no")
```

## Compute participant counts: Pre-exclusion

```{r}
n_before_exclusion_by_cohort <- d_participants %>%
    group_by(age_cohort) %>% 
  summarise(n_participants = n(),
            n_labs = length(unique(lab_id)))

#To-Do: validate against ET and session error info
# check if this overlaps with eye-tracking data. If no eyetracking data available, check session info. If equipment error, participant should still be included in initial sample.
```

## Summarize age information for each cohort: Pre-exclusion

```{r}
age_stat_adults_before_exclusion <- d_participants %>% 
  filter(age_cohort=="adults") %>% 
  group_by(lab_id, participant_lab_id) %>%
  summarise(age_years = (as.numeric(age_years))[1]) %>%
  ungroup() %>%
  summarise(mean = mean(age_years, na.rm = TRUE), 
            min = min(age_years, na.rm = TRUE), 
            max = max(age_years, na.rm = TRUE),
            sd = sd(age_years, na.rm = TRUE))

age_stat_toddlers_before_exclusion <- d_participants %>% 
  filter(age_cohort=="toddlers") %>% 
  group_by(lab_id, participant_lab_id) %>%
  summarise(age_mo = age_mo[1]) %>%
  ungroup() %>%
  summarise(mean = mean(age_mo), 
            min = min(age_mo), 
            max = max(age_mo),
            sd = sd(age_mo))
```

## Summarize lab information for each cohort: Pre-exclusion

```{r}
#adults
lab_stats_adults_before_exclusion <- d_participants %>%
  filter(age_cohort=="adults") %>% 
  group_by(lab_id, participant_lab_id) %>%
  summarise(
    participant_gender = participant_gender[1],
    age_years = (as.numeric(age_years))[1],
    method = method[1]) %>%
  group_by(lab_id) %>%
  summarise(
    N_collected = n(),
    N_female = sum(participant_gender=="woman"),
    Mean_Age = round(mean(age_years, na.rm = TRUE), 2),
    Method = paste(unique(method[!is.na(method)]), collapse = ", "))

#toddlers
lab_stats_toddlers_before_exclusion <- d_participants %>%
  filter(age_cohort=="toddlers") %>% 
  group_by(lab_id, participant_lab_id) %>%
  summarise(
    participant_gender = participant_gender[1],
    age_mo = (as.numeric(age_mo))[1],
    method = method[1]) %>%
  group_by(lab_id) %>%
  summarise(
    N_collected = n(),
    N_female = sum(participant_gender=="girl"),
    Mean_Age = round(mean(age_mo, na.rm = TRUE), 2),
    Method = paste(unique(method[!is.na(method)]), collapse = ", "))
```

## Summarize participant counts: after exclusions applied

Apply exclusions

```{r}
d_participants_included <- d_participants %>%
  filter(exclude_participant=="no")

#validate against participants in post-exclusion ET data
setdiff(unique(d_participants_included$participant_lab_id),unique(data_preprocessed_post_exclusions$participant_lab_id))
setdiff(unique(data_preprocessed_post_exclusions$participant_lab_id),unique(d_participants_included$participant_lab_id))
```

```{r}
#number of participants and labs in each group
n_included_by_cohort <- d_participants_included %>% 
  group_by(age_cohort) %>% 
  summarise(n_participants = n(),
            n_labs = length(unique(lab_id)))
```

## Summarize age information for each cohort: after exclusions applied

```{r}
age_stat_adults_included<- d_participants_included %>% 
  filter(age_cohort=="adults") %>% 
  group_by(lab_id, participant_lab_id) %>%
  summarise(age_years = (as.numeric(age_years))[1]) %>%
  ungroup() %>%
  summarise(mean = mean(age_years, na.rm = TRUE), 
            min = min(age_years, na.rm = TRUE), 
            max = max(age_years, na.rm = TRUE),
            sd = sd(age_years, na.rm = TRUE))

age_stat_toddlers_included <- d_participants_included %>% 
  filter(age_cohort=="toddlers") %>% 
  group_by(lab_id, participant_lab_id) %>%
  summarise(age_mo = age_mo[1]) %>%
  ungroup() %>%
  summarise(mean = mean(age_mo), 
            min = min(age_mo), 
            max = max(age_mo),
            sd = sd(age_mo))
```

## Summarize lab information for each cohort: after exclusions applied

```{r}
#adults
lab_stats_adults_included <- d_participants_included %>%
  filter(age_cohort=="adults") %>% 
  group_by(lab_id, participant_lab_id) %>%
  summarise(
    participant_gender = participant_gender[1],
    age_years = (as.numeric(age_years))[1],
    method = method[1]) %>%
  group_by(lab_id) %>%
  summarise(
    N_included = n(),
    N_female = sum(participant_gender=="woman"),
    Mean_Age = round(mean(age_years, na.rm = TRUE), 2),
    Method = paste(unique(method[!is.na(method)]), collapse = ", "))
#the reason there's a mismatch between the N when you sum across all N_included here and the n in n_included_by_cohort is related to GitHub issue #124: https://github.com/manybabies/mb2-analysis/issues/124

lab_stats_adults_included <- lab_stats_adults_included %>%
  left_join(select(lab_stats_adults_before_exclusion,lab_id,N_collected)) %>%
  relocate(N_collected,.after=lab_id)

papaja::apa_table(lab_stats_adults_included,
                  caption = "Lab and Participant information.",
                  format.args = list(digits = 0),
                  longtable = TRUE,font_size="footnotesize",
                  align=c("l","c","c","c","c","l"),
                  col.names = c("Lab","N collected", "N included","Sex (N   Female)","Mean Age (years)","Method"))
```

```{r}
#toddlers
lab_stats_toddlers_included <- d_participants_included %>%
  filter(age_cohort=="toddlers") %>% 
  group_by(lab_id, participant_lab_id) %>%
  summarise(
    participant_gender = participant_gender[1],
    age_mo = (as.numeric(age_mo))[1],
    method = method[1]) %>%
  group_by(lab_id) %>%
  summarise(
    N_included = n(),
    N_female = sum(participant_gender=="girl"),
    Mean_Age = round(mean(age_mo, na.rm = TRUE), 2),
    Method = paste(unique(method[!is.na(method)]), collapse = ", "))

lab_stats_toddlers_included <- lab_stats_toddlers_included %>%
  left_join(select(lab_stats_toddlers_before_exclusion,lab_id,N_collected)) %>%
  relocate(N_collected,.after=lab_id)


papaja::apa_table(lab_stats_toddlers_included,
                  caption = "Lab and Participant information.",
                  format.args = list(digits = 0),
                  longtable = TRUE,font_size="footnotesize",
                  align=c("l","c","c","c","c","c","l"),
                  col.names = c("Lab","N collected","N included", "Sex (N   Female)","Mean Age (months)","Method"))
```

Our final dataset consisted of `r sum(n_included_by_cohort$n_participants)` participants, with an overall exclusion rate of `r round(sum(n_included_by_cohort$n_participants)/sum(n_before_exclusion_by_cohort$n_participants),4)*100`% (toddlers: `r round(filter(n_included_by_cohort,age_cohort=="toddlers")$n_participants/filter(n_before_exclusion_by_cohort,age_cohort=="toddlers")$n_participants,4)*100`%, adults: `r round(filter(n_included_by_cohort,age_cohort=="adults")$n_participants/filter(n_before_exclusion_by_cohort,age_cohort=="adults")$n_participants,4)*100`%).
Tables 1 A. and B. show the distribution of included participants across labs, eye-tracking methods, and ages. 
A final sample of `r sum(lab_stats_toddlers_included$N_included)` toddlers (`r round(sum(lab_stats_toddlers_included$N_female)/sum(lab_stats_toddlers_included$N_included),4)*100`% female) that were tested in `r length(unique(lab_stats_toddlers_included$lab_id))` labs (mean lab sample size = `r round(mean(lab_stats_toddlers_included$N_included),2)`, SD =`r round(sd(lab_stats_toddlers_included$N_included),2)`, range: `r min(lab_stats_toddlers_included$N_included)` - `r max(lab_stats_toddlers_included$N_included)`) was analyzed. 
The average age of toddlers in the final sample was `r round(age_stat_toddlers_included$mean, 2)` months (SD: `r round(age_stat_toddlers_included$sd, 2)`, range: `r round(age_stat_toddlers_included$min, 2)` - `r round(age_stat_toddlers_included$max, 2)`). 
The final sample size of included adults was N = `r sum(lab_stats_adults_included$N_included)` (`r round(sum(lab_stats_adults_included$N_female)/sum(lab_stats_adults_included$N_included),4)*100`% female), tested in `r length(unique(lab_stats_adults_included$lab_id))` labs (mean lab sample size = `r round(mean(lab_stats_adults_included$N_included),2)`, SD = `r round(sd(lab_stats_adults_included$N_included),2)`, range: `r min(lab_stats_adults_included$N_included)` - `r max(lab_stats_adults_included$N_included)`). 
Their mean age was `r round(age_stat_adults_included$mean, 2)` years (SD: `r round(age_stat_adults_included$sd, 2)`, range: `r round(age_stat_adults_included$min, 2)` - `r round(age_stat_adults_included$max, 2)`).
